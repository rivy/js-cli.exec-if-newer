#!/usr/bin/env node
"use strict";function c(e,t,r,s,i,n,o){try{var a=e[n](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(s,i)}const e=require("yargs"),l=require("fast-glob"),u=require("execa"),p=require("fs"),d=e.example("$0 --source src/** --source assets/** --target dist/** TARGET_EXE ARGS").option("s",{alias:"source",demandOption:!0,describe:"A glob describing the source files that may be updated. May be supplied more than once for additional source files.",type:"array",nargs:1}).option("t",{alias:"target",demandOption:!0,describe:"A glob describing the target files to which the source files will be compared. May be supplied more than once for additional target files.",type:"array",nargs:1}).option("debug",{describe:"enable debug logging",type:"boolean"}).wrap(e.terminalWidth()).argv;function t(){var a;return a=function*(e){var t=e.source.map(m);const r=e.target.map(m);var t=yield g(t),s=yield g(r),i=(e.debug&&console.warn({options:e,sourceFileStats:t,targetFileStats:s}),!!r.filter(e=>{if(!l.isDynamicPattern(e))return e}).find(e=>!p.existsSync(e)));if(e.debug&&console.log({anyMissingNonGlobTargets:i}),i||function(e,t){const r=e=>new Date(e.stats.mtimeMs),s=t.map(r).reduce((e,t)=>{return null==e&&(e=t),t.getTime()<e.getTime()?t:e},void 0),i=e.map(r).reduce((e,t)=>{return null==e&&(e=t),t.getTime()>e.getTime()?t:e},s);d.debug&&console.log({sourceDates:e.map(r),latestSourceDate:i,targetDates:t.map(r),earliestTargetDate:s});return null!=i&&(null==s||i.getTime()>s.getTime())}(t,s))try{var n=function(e){{if(e._&&e._.length)return e._.join(" ");throw new Error("Missing command")}}(e);const o=u.shell(n);o.stdout.pipe(process.stdout),o.stderr.pipe(process.stderr),process.stdin.pipe(o.stdin),yield o,process.exit()}catch(e){console.error(e.message),process.exit(1)}process.exit(0)},(t=function(){var e=this,o=arguments;return new Promise(function(t,r){var s=a.apply(e,o);function i(e){c(s,t,r,i,n,"next",e)}function n(e){c(s,t,r,i,n,"throw",e)}i(void 0)})}).apply(this,arguments)}function g(e){var t={caseSensitiveMatch:!/^win/i.test(process.platform),stats:!0};return l(e,t)}function m(e){return e.replace(/\\/g,"/")}!function(){t.apply(this,arguments)}(d);